
# pylearn2 MLP model for simple scalar regression
# ~ Christopher Pramerdorfer

!obj:pylearn2.train.Train {
    # define multilayer perceptron model
    model: !obj:pylearn2.models.mlp.MLP {
        nvis: 1, # one input x
        layers: [ # two layers
            !obj:pylearn2.models.mlp.Tanh { # tanh activations for hidden units
                dim: 3, # use three hidden units
                layer_name: 'hidden',
                irange: 1 # init weights randomly from [-1,1]
            },
            !obj:pylearn2.models.mlp.Linear { # linear output layer for regression
                dim: 1, # one output unit
                layer_name: 'out',
                irange: 1
            }
        ]
    },
    # define the dataset (use 'mlp_gen_data_regression.py' to generate)
    dataset: &train !pkl: 'mlp_data_regression.pkl',
    # define learning algorithm (batch gradient descent)
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
        conjugate: 1,
        batch_size: 50,
        line_search_mode: 'exhaustive',
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 100 # train for 100 epochs (not a good criterion in practice)
        }
    },
    save_freq : 100 # save model to mlp_regression.pkl
}
